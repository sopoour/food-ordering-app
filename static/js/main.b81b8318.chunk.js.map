{"version":3,"sources":["Components/UI/Button.js","Components/UI/StyleVariables.js","store/cart-context.js","Components/NavBar/NavBarCartButton.js","Components/NavBar/NavBar.js","Components/UI/Input.js","Components/Meals/MealItemForm.js","Components/UI/Card.js","Components/Meals/MealItem.js","Components/Meals/AvailableMeals.js","assets/restaurant_image.jpg","Components/Meals/MealsIntro.js","Components/Cart/CartItem.js","hooks/use-input.js","Components/Cart/Checkout.js","Components/Cart/Cart.js","Components/Cart/CartModal.js","store/CartProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","colors","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","CartContext","React","createContext","totalPrice","items","onAdd","item","onRemove","id","clearCart","CartButtonContainer","Counter","span","NavBarCartButton","props","useState","btnIsHighlighted","setBtnIsHighlighted","cartCtx","useContext","numCartItems","reduce","curNumber","amount","btnClasses","useEffect","length","timer","setTimeout","clearTimeout","onClick","className","Nav","nav","NavBar","scrolled","setScrolled","window","addEventListener","offset","scrollY","navClasses","Fragment","onOpenCart","InputContainer","div","InputField","input","Input","forwardRef","ref","classes","htmlFor","labelName","addedInputClass","isError","style","color","margin","errorName","ItemFormContainer","form","AddButton","MealItemForm","amountIsValid","setAmountIsValid","amountInputRef","useRef","onSubmit","event","preventDefault","enteredAmount","current","value","enteredAmountNumber","trim","onAddToCart","type","min","max","step","defaultValue","Card","MealItemCard","MealItem","name","description","price","toFixed","MainContainer","ul","AvailableMeals","meals","setMeals","httpError","setHttpError","isLoading","setIsLoading","fetchData","useCallback","a","fetch","response","ok","Error","json","key","data","loadedFood","push","message","map","IntroBox","IntroContainer","background","MealsIntro","CartItemWrapper","li","CartSummary","AmountButtons","CartItem","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","isValid","hasError","handleValueChange","target","handleInputBlur","CheckoutForm","isNotEmpty","isFiveChars","Checkout","enteredName","enteredNameIsValid","nameHasError","handleNameChange","handleNameBlur","enteredStreet","enteredStreetIsValid","streetHasError","handleStreetChange","handleStreetBlur","enteredPostalCode","enteredPostalCodeIsValid","postalCodeasError","handlePostalCodeChange","handlePostalCodeBlur","enteredCity","enteredCityIsValid","cityHasError","handleCityChange","handleCityBlur","inputFields","errorText","onChange","onBlur","formIsValid","onConfirm","street","postalCode","city","onCancel","backgroundColor","disabled","onOrder","CartCard","Cart","hasItems","isCheckout","setIsCheckout","isHappening","isDone","submission","setSubmission","error","setError","handleCartItemRemove","handleCartItemAdd","handleOrderSubmission","userData","method","body","JSON","stringify","orderTime","Date","user","orderedItems","console","log","orderActions","onCloseCart","cartModalContent","bind","isSubmittingModalContent","submissionDoneContent","BackdropContainer","Backdrop","CartModal","ReactDom","createPortal","document","getElementById","defaultCartState","cartReducer","state","action","updatedItems","updatedTotalPrice","existingCartItemsIndex","findIndex","existingCartItem","updatedItem","concat","filter","CartProvider","useReducer","cartState","dispatchCartAction","Provider","children","AppContainer","App","openCart","setOpenCart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b81b8318.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  border: none;\n  padding: 0.5rem 2rem;\n  border-radius: 25px;\n  font-weight: bold;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n`;\n\nexport default Button;\n","export const colors = {\n  primary: \"rgba(\t244, 162, 97, 1)\",\n  primaryHover: \"rgba(246, 177, 120, 1)\",\n  secondary: \"rgba(79, 93, 117, 1)\",\n  secondaryHover: \"rgba(147, 160, 182, 1)\",\n  secondayBright: \"rgba(172, 180, 194, 1)\",\n  textOnColor: \"rgba(255, 255, 255, 1)\",\n};\n\nconst size = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px'\n}\n\n\nexport const device = {\n  mobileS: `(min-width: ${size.mobileS})`,\n  mobileM: `(min-width: ${size.mobileM})`,\n  mobileL: `(min-width: ${size.mobileL})`,\n  tablet: `(min-width: ${size.tablet})`,\n  laptop: `(min-width: ${size.laptop})`,\n  laptopL: `(min-width: ${size.laptopL})`,\n  desktop: `(min-width: ${size.desktop})`,\n  desktopL: `(min-width: ${size.desktop})`\n};","import React from \"react\";\n\n//an object that also contains components\nconst CartContext = React.createContext({\n  totalPrice: 0,\n  items: [],\n  onAdd: (item) => {},\n  onRemove: (id) => {},\n  clearCart: () => {},\n});\n\n//To destructure and pull out more out of the App component --> Creae a separate Context Management Component\n\nexport default CartContext;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../UI/Button\";\nimport { colors } from \"../UI/StyleVariables\";\nimport CartContext from \"../../store/cart-context\";\n\nconst CartButtonContainer = styled(Button)`\n  display: flex;\n  flex-flow: row;\n  justify-content: space-around;\n  gap: 0.5rem;\n  align-items: center;\n  background-color: ${colors.primary};\n  color: ${colors.textOnColor};\n  padding: 1.2rem 2rem;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n\n  &:hover,\n  &:active {\n    background-color: ${colors.primaryHover};\n  }\n\n  //bump animation when items are added\n  &.bump {\n    animation: bump 300ms ease-out;\n  }\n\n  @keyframes bump {\n    0% {\n      transform: scale(1);\n    }\n    10% {\n      transform: scale(0.9);\n    }\n    30% {\n      transform: scale(1.1);\n    }\n    50% {\n      transform: scale(1.15);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n`;\n\nconst Counter = styled.span`\n  display: block;\n  border-radius: 50%;\n  width: 1.1rem;\n  height: 1.1rem;\n  background: ${colors.secondary};\n  padding: 0.2rem;\n`;\n\nconst NavBarCartButton = (props) => {\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\n  const cartCtx = useContext(CartContext);\n\n  //to just count the meal items uniquely and not the total amount per item use reduce()\n  const numCartItems = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0);\n\n  //if the state is true insert the className \"bump\" to the button\n  const btnClasses = btnIsHighlighted ? \"bump\" : \"\";\n\n  useEffect(() => {\n    //if the cart is empty don't do anything\n    if (cartCtx.items.length === 0) {\n      return;\n    }\n    //otherwise change state to true and add \"bump\" as className to trigger animation\n    setBtnIsHighlighted(true);\n\n    //after 300ms stop animation\n    const timer = setTimeout(() => {\n      setBtnIsHighlighted(false);\n    }, 300);\n\n    return () => {\n      clearTimeout(timer);\n    };\n\n  }, [cartCtx.items]);\n\n  return (\n    <CartButtonContainer onClick={props.onClick} className={btnClasses}>\n      <span>\n        <i className=\"fa fa-shopping-cart\"></i>\n      </span>\n      <span>Your Cart</span>\n      <Counter>{numCartItems}</Counter>\n    </CartButtonContainer>\n  );\n};\n\nexport default NavBarCartButton;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport NavBarCartButton from \"./NavBarCartButton\";\nimport { colors } from \"../UI/StyleVariables\";\n\nconst Nav = styled.nav`\n  width: 100%;\n  min-height: 10vh;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  position: sticky;\n  top: 0;\n  align-items: center;\n  transition: all 0.5s ease-in;\n  background: transparent;\n  color: ${colors.secondary};\n  padding: 0 1rem 0 1rem;\n\n  &.scrolled {\n    color: white;\n    background: ${colors.secondary};\n  }\n`;\n\nconst NavBar = (props) => {\n  const [scrolled, setScrolled] = useState(false);\n  const handleScroll = () => {\n    const offset = window.scrollY;\n    if (offset >= 100) {\n      setScrolled(true);\n    } else {\n      setScrolled(false);\n    }\n  };\n\n  window.addEventListener(\"scroll\", handleScroll);\n\n  const navClasses = scrolled ? \"scrolled\" : \"\";\n\n  return (\n    <React.Fragment>\n      <Nav className={navClasses}>\n        <h1>Sopo Meal</h1>\n        <NavBarCartButton onClick={props.onOpenCart} />\n      </Nav>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar;\n","import styled from \"styled-components\";\nimport React from \"react\";\nimport { device } from \"./StyleVariables\";\n\nconst InputContainer = styled.div`\n  font-size: 16px;\n  margin-top: 1rem;\n\n  & label {\n    margin-right: 1rem;\n    font-weight: bold;\n  }\n\n  &.invalid input {\n    border: 1px solid #b40e0e;\n    background-color: #fddddd;\n  }\n\n  &.order-input {\n    display: flex;\n    flex-flow: column wrap;\n\n    & label {\n      display: block;\n    }\n  }\n\n  @media ${device.tablet} {\n    margin-top: 0;\n  }\n`;\n\nconst InputField = styled.input`\n  border-radius: 5px;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n  border: none;\n  height: 1.5rem;\n  margin-top: 0.5rem;\n\n  &.amount-input {\n    width: 2rem;\n    height: 1rem;\n    text-align: center;\n  }\n\n  //Remove arrows from number field\n  /* Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  /* Firefox */\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Input = React.forwardRef((props, ref) => {\n  return (\n    <InputContainer className={props.classes}>\n      <label htmlFor={props.input.id}>{props.labelName}</label>\n      <InputField\n        ref={ref}\n        {...props.input}\n        className={props.addedInputClass}\n      />\n      {props.isError && (\n        <p style={{ color: \"red\", margin: \"0.5rem 0 0 0\" }}>\n          Please enter a valid {props.errorName}\n        </p>\n      )}\n    </InputContainer>\n  );\n});\n\nexport default Input;\n","import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../UI/Button\";\nimport Input from \"../UI/Input\";\nimport { colors, device } from \"../UI/StyleVariables\";\n\nconst ItemFormContainer = styled.form`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n  border-top: 2px solid white;\n  width: 100%;\n\n  @media ${device.tablet} {\n    width: auto;\n    border-top: none;\n    align-items: flex-end;\n  }\n`;\n\nconst AddButton = styled(Button)`\n  background-color: ${colors.secondary};\n  color: ${colors.textOnColor};\n  margin-top: 1rem;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.6);\n\n  &:hover {\n    background-color: ${colors.secondaryHover};\n  }\n`;\n\nconst MealItemForm = (props) => {\n  const [amountIsValid, setAmountIsValid] = useState(true);\n\n  //since it's a simple input number change and only read (not write), it's recommended to use ref\n  const amountInputRef = useRef();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    //get currently entered value from input, add a + in front of it so it's a number and not a string\n    const enteredAmount = amountInputRef.current.value;\n    const enteredAmountNumber = +enteredAmount;\n\n    if (\n      enteredAmount.trim().length === 0 ||\n      enteredAmountNumber < 1 ||\n      enteredAmountNumber > 5\n    ) {\n      setAmountIsValid(false);\n      return;\n    }\n\n    //the cart item that is gonna be added needs more data than just the amount, but in this form we only have the amount\n    //so we need to handle the actual adding of the entire meal item within MealItem\n    props.onAddToCart(enteredAmountNumber);\n  };\n\n  return (\n    /* We are handling the entire submission via the form so it applies to changes of both the add btn and input */\n    <ItemFormContainer onSubmit={handleSubmit}>\n      <Input\n        ref={amountInputRef}\n        labelName={\"Amount: \"}\n        addedInputClass={\"amount-input\"}\n        input={{\n          id: \"amount_\" + props.id,\n          type: \"number\",\n          min: \"1\",\n          max: \"5\",\n          step: \"1\",\n          defaultValue: \"1\",\n        }}\n      ></Input>\n      <AddButton>+ Add</AddButton>\n      {!amountIsValid && <p>Please enter a valid amount (1-5).</p>}\n    </ItemFormContainer>\n  );\n};\n\nexport default MealItemForm;\n","import styled from 'styled-components';\n\nconst Card = styled.div`\n  border-radius: 12px;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n`;\n\n\nexport default Card;","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport MealItemForm from \"./MealItemForm\";\nimport Card from \"../UI/Card\";\nimport { colors } from \"../UI/StyleVariables\";\nimport CartContext from \"../../store/cart-context\";\nimport { device } from \"../UI/StyleVariables\";\n\nconst MealItemCard = styled(Card)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-flow: column wrap;\n  gap: 1rem;\n  background: ${colors.primary};\n  padding: 1rem;\n  margin: 1rem;\n  &li {\n    align-self: left;\n  }\n\n  @media ${device.tablet} {\n    flex-flow: row wrap;\n    gap: 0rem;\n    padding: 1rem 2rem 1rem 2rem;\n  }\n`;\n\nconst MealItem = (props) => {\n  const cartCtx = useContext(CartContext);\n\n  //update the array of items within context with the added item\n  //the updated amount we get by passing this handler to the MealItemForm\n  const handleAddToCart = (amount) => {\n    cartCtx.onAdd({\n      id: props.id,\n      name: props.name,\n      amount: amount,\n      price: props.price,\n    });\n  };\n\n  return (\n    <MealItemCard>\n      <li>\n        <h2>{props.name}</h2>\n        <p>{props.description}</p>\n        <p>${props.price.toFixed(2)}</p>\n      </li>\n      <MealItemForm onAddToCart={handleAddToCart} id={props.id} />\n    </MealItemCard>\n  );\n};\n\nexport default MealItem;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport MealItem from \"./MealItem\";\n\nconst MainContainer = styled.ul`\n  display: flex;\n  //mobile-friendly by default:\n  flex-flow: column wrap;\n  margin: 1rem;\n  padding: 0.5rem;\n  list-style-type: none;\n`;\n\nconst AvailableMeals = () => {\n  const [meals, setMeals] = useState([]);\n  const [httpError, setHttpError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // TODO: Figure out why it doesn't show the error message and instead it shows a \"failed to fetch\"\n\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\n        \"https://react-project-exercise-default-rtdb.europe-west1.firebasedatabase.app/Meals.json\"\n      );\n  \n      if (!response.ok) {\n        throw new Error(\"Something went wrong with fetching the meals data!\");\n      }\n  \n      const data = await response.json();\n  \n      let loadedFood = [];\n  \n      for (const key in data) {\n        loadedFood.push({\n          id: key,\n          name: data[key].name,\n          description: data[key].description,\n          price: data[key].price,\n        });\n      }\n  \n      setMeals(loadedFood);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setHttpError(error.message);\n    }\n    \n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <MainContainer>\n      {!isLoading &&\n        meals.length > 0 &&\n        meals.map((item) => (\n          <MealItem\n            id={item.id}\n            key={item.id}\n            name={item.name}\n            description={item.description}\n            price={item.price}\n          />\n        ))}\n      {!isLoading && httpError && <p>{httpError}</p>}\n      {isLoading && <p>Loading...</p>}\n    </MainContainer>\n  );\n};\n\nexport default AvailableMeals;\n","export default __webpack_public_path__ + \"static/media/restaurant_image.c82e5a0b.jpg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../UI/Card\";\nimport background from \"../../assets/restaurant_image.jpg\"\n\nconst IntroBox = styled(Card)`\n  margin: 2rem 1rem 2rem 1rem;\n  padding: 1rem;\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n\n  @media (min-width: 1024px) {\n    margin: 3rem 15rem 3rem 15rem;\n    padding: 2rem;\n  }\n\n  @media (min-width: 1440px) {\n    padding: 5rem;\n  }\n`;\n\nconst IntroContainer = styled.div`\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n  background: repeat url(${background});\n`;\n\nconst MealsIntro = () => {\n  return (\n    <IntroContainer > \n      <IntroBox>\n        <h2>Delicious Food, Delivered To You</h2>\n        <p>\n          Choose your favorite meal from our broad selection of available meals\n          and enjoy a delicious lunch or dinner at home.\n        </p>\n        <p>\n          All our meals are cooked with high-quality ingredients, just-in-time\n          and of course by experienced chefs!\n        </p>\n      </IntroBox>\n    </IntroContainer>\n  );\n};\n\nexport default MealsIntro;\n","import React from \"react\";\nimport Button from \"../UI/Button\";\nimport styled from \"styled-components\";\nimport { colors, device } from \"../UI/StyleVariables\";\n\nconst CartItemWrapper = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 3px solid ${colors.primary};\n  padding: 1rem 0;\n  font-size: 14px;\n\n  & div.actions {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-end;\n    text-align: center;\n  }\n\n  @media ${device.tablet} {\n    font-size: auto;\n  }\n`;\n\nconst CartSummary = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n\n  @media ${device.tablet} {\n    gap: 2rem;\n  }\n\n  & span.price {\n    font-weight: bold;\n    color: ${colors.secondary};\n  }\n\n  & span.amount {\n    font-weight: bold;\n    border: 1px solid ${colors.secondaryHover};\n    padding: 0.25rem 0.75rem;\n    border-radius: 6px;\n    color: ${colors.secondary};\n  }\n`;\n\nconst AmountButtons = styled(Button)`\n  border: 1px solid ${colors.secondary};\n  font: inherit;\n  font-weight: bold;\n  font-size: 1.25rem;\n  width: 5rem;\n  color: ${colors.secondary};\n  text-align: center;\n  background-color: transparent;\n  cursor: pointer;\n  margin: 0.25rem;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n\n  &:hover,\n  &:active {\n    background-color: ${colors.secondaryHover};\n    color: white;\n  }\n`;\n\nconst CartItem = (props) => {\n  return (\n    <CartItemWrapper>\n      <div className={\"content\"}>\n        <h2>{props.name}</h2>\n        <CartSummary>\n          <span className={\"price\"}>${props.price.toFixed(2)}</span>\n          <span className={\"amount\"}>x {props.amount}</span>\n        </CartSummary>\n      </div>\n      <div className={\"actions\"}>\n        <AmountButtons onClick={props.onRemove}>-</AmountButtons>\n        <AmountButtons onClick={props.onAdd}>+</AmountButtons>\n      </div>\n    </CartItemWrapper>\n  );\n};\n\nexport default CartItem;\n","import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  //we can derive the state of enteredNameIsValid based on the enteredName is not empty\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const handleValueChange = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  const handleInputBlur = () => {\n    setIsTouched(true);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    handleValueChange,\n    handleInputBlur,\n  };\n};\n\nexport default useInput;\n","import React from \"react\";\nimport Input from \"../UI/Input\";\nimport Button from \"../UI/Button\";\nimport styled from \"styled-components\";\nimport useInput from \"../../hooks/use-input\";\nimport { colors } from \"../UI/StyleVariables\";\n\n//TODO: Try out to use Refs instead of useState for the values since it doesn't make any sense to use useState for that\n\nconst CheckoutForm = styled.form`\n  display: flex;\n  flex-flow: column wrap;\n  gap: 0.5rem;\n  margin-top: 2rem;\n\n  & div.confirm-actions {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-end;\n    gap: 1rem;\n    margin-top: 1.5rem;\n\n    & button.confirm-btn {\n      background-color: ${colors.primary};\n      color: ${colors.textOnColor};\n\n      &:disabled,\n      button:disabled:hover,\n      button:disabled:active {\n        background-color: ${colors.secondary};\n        color: ${colors.textOnColor};\n      }\n    }\n  }\n`;\n\n//Some helper functions for form validation\nconst isNotEmpty = (value) => {\n  return value.trim() !== \"\";\n};\nconst isFiveChars = (value) => {\n  return value.trim().length === 5;\n};\n\nconst Checkout = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameHasError,\n    handleValueChange: handleNameChange,\n    handleInputBlur: handleNameBlur,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetHasError,\n    handleValueChange: handleStreetChange,\n    handleInputBlur: handleStreetBlur,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredPostalCode,\n    isValid: enteredPostalCodeIsValid,\n    hasError: postalCodeasError,\n    handleValueChange: handlePostalCodeChange,\n    handleInputBlur: handlePostalCodeBlur,\n  } = useInput(isFiveChars);\n\n  const {\n    value: enteredCity,\n    isValid: enteredCityIsValid,\n    hasError: cityHasError,\n    handleValueChange: handleCityChange,\n    handleInputBlur: handleCityBlur,\n  } = useInput(isNotEmpty);\n\n  const inputFields = [\n    {\n      id: \"name\",\n      name: \"Name\",\n      value: enteredName,\n      isError: nameHasError,\n      errorText: \"name!\",\n      onChange: handleNameChange,\n      onBlur: handleNameBlur,\n      classes: !nameHasError ? \"order-input\" : \"order-input invalid\",\n      type: \"text\",\n    },\n    {\n      id: \"street\",\n      name: \"Street\",\n      value: enteredStreet,\n      isError: streetHasError,\n      errorText: \"street!\",\n      onChange: handleStreetChange,\n      onBlur: handleStreetBlur,\n      classes: !streetHasError ? \"order-input\" : \"order-input invalid\",\n      type: \"text\",\n    },\n    {\n      id: \"postal\",\n      name: \"Postal Code\",\n      value: enteredPostalCode,\n      isError: postalCodeasError,\n      errorText: \"postal code (5 characters long)!\",\n      onChange: handlePostalCodeChange,\n      onBlur: handlePostalCodeBlur,\n      classes: !postalCodeasError ? \"order-input\" : \"order-input invalid\",\n      type: \"number\",\n    },\n    {\n      id: \"city\",\n      name: \"City\",\n      value: enteredCity,\n      isError: cityHasError,\n      errorText: \"city!\",\n      onBlur: handleCityBlur,\n      onChange: handleCityChange,\n      classes: !cityHasError ? \"order-input\" : \"order-input invalid\",\n      type: \"text\",\n    },\n  ];\n\n  let formIsValid = false;\n\n  if (\n    enteredNameIsValid &&\n    enteredStreetIsValid &&\n    enteredPostalCodeIsValid &&\n    enteredCityIsValid\n  ) {\n    formIsValid = true;\n  }\n\n  const handleConfirm = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      postalCode: enteredPostalCode,\n      city: enteredCity,\n    });\n  };\n\n  return (\n    <CheckoutForm onSubmit={handleConfirm}>\n      {inputFields.map((item) => (\n        <Input\n          labelName={item.name}\n          isError={item.isError}\n          errorName={item.errorText}\n          classes={item.classes}\n          input={{\n            id: item.id,\n            type: item.type,\n            value: item.value,\n            onBlur: item.onBlur,\n            onChange: item.onChange,\n          }}\n        ></Input>\n      ))}\n      <div className={\"confirm-actions\"}>\n        <Button\n          type=\"button\"\n          onClick={props.onCancel}\n          style={{\n            backgroundColor: colors.secondayBright,\n            color: colors.textOnColor,\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          disabled={!formIsValid}\n          onClick={props.onOrder}\n          className={\"confirm-btn\"}\n        >\n          Confirm\n        </Button>\n      </div>\n    </CheckoutForm>\n  );\n};\n\nexport default Checkout;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../UI/Card\";\nimport Button from \"../UI/Button\";\n\nimport { colors, device } from \"../UI/StyleVariables\";\nimport CartItem from \"./CartItem\";\nimport CartContext from \"../../store/cart-context\";\nimport Checkout from \"./Checkout\";\n\nconst CartCard = styled(Card)`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  z-index: 100;\n  overflow: hidden;\n  background: white;\n  padding: 1.25rem;\n\n  @media ${device.tablet} {\n    width: 50%;\n  }\n\n  & ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    max-height: 20rem;\n    overflow: auto;\n  }\n\n  & div.total {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-weight: bold;\n    font-size: 1.5rem;\n    margin: 2rem 0;\n  }\n\n  & div.order-actions {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-end;\n    gap: 0.5rem;\n  }\n`;\n\nconst Cart = (props) => {\n  const cartCtx = useContext(CartContext);\n\n  const totalPrice = `$${cartCtx.totalPrice.toFixed(2)}`;\n\n  const hasItems = cartCtx.items.length > 0;\n\n  const [isCheckout, setIsCheckout] = useState(false);\n  const [submission, setSubmission] = useState({\n    isHappening: false,\n    isDone: false,\n  });\n  const [error, setError] = useState(null);\n\n  /* const [orderComplete, setOrderComplete] = useState({\n    name: \"\",\n    address: \"\",\n    paymentMethod: \"\",\n    order: [],\n  }); */\n\n  const handleCartItemRemove = (id) => {\n    cartCtx.onRemove(id);\n  };\n\n  const handleCartItemAdd = (item) => {\n    //add item where I set the amount to 1\n    cartCtx.onAdd({ ...item, amount: 1 });\n  };\n\n  const handleOrder = () => {\n    setIsCheckout(true);\n  };\n\n  //the userData is inserted into this function via the Checkout component\n  //the orderItems we can get from our context\n\n  \n  const handleOrderSubmission = async (userData) => {\n    setSubmission({\n      isHappening: true,\n      isDone: false,\n    });\n\n    try {\n      //after state changed, first await that the fetch has happened until you change the state again\n      const response = await fetch(\n        \"https://react-project-exercise-default-rtdb.europe-west1.firebasedatabase.app/orders.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            orderTime: new Date(),\n            user: userData,\n            orderedItems: cartCtx.items,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong with sending your order, try again!\");\n      }\n      const data = await response.json();\n      console.log(data);\n      setSubmission({\n        isHappening: false,\n        isDone: true,\n      });\n      cartCtx.clearCart();\n    } catch (error) {\n      setError(error.message)\n      setSubmission({\n        isHappening: false,\n        isDone: false,\n      });\n    }\n  };\n\n  const orderActions = (\n    <div className=\"order-actions\">\n      <Button\n        style={{\n          backgroundColor: colors.secondayBright,\n          color: colors.textOnColor,\n        }}\n        onClick={props.onCloseCart}\n      >\n        Close\n      </Button>\n      {hasItems && (\n        <Button\n          style={{ backgroundColor: `${colors.primary}`, color: \"white\" }}\n          onClick={handleOrder}\n        >\n          Order\n        </Button>\n      )}\n    </div>\n  );\n\n  const cartModalContent = (\n    <React.Fragment>\n      <ul>\n        {cartCtx.items.map((item) => (\n          <CartItem\n            key={item.id}\n            amount={item.amount}\n            name={item.name}\n            price={item.price}\n            /*\n             * Use bind to pre-configure the function for future execution\n             * pre-configure the argument that function will receieve when it executes\n             *\n             * */\n            onRemove={handleCartItemRemove.bind(null, item.id)}\n            onAdd={handleCartItemAdd.bind(null, item)}\n          />\n        ))}\n      </ul>\n      <div className=\"total\">\n        <span>Total Price</span>\n        <span>{totalPrice}</span>\n      </div>\n      {!isCheckout && orderActions}\n      {isCheckout && (\n        <Checkout\n          onCancel={props.onCloseCart}\n          onConfirm={handleOrderSubmission}\n        />\n      )}\n    </React.Fragment>\n  );\n\n  const isSubmittingModalContent = <p>Sending order data...</p>;\n\n  const submissionDoneContent = (\n    <React.Fragment>\n      <p>You have successfully sent your order!</p>\n      <div className=\"order-actions\">\n        <Button\n          style={{\n            backgroundColor: colors.secondayBright,\n            color: colors.textOnColor,\n          }}\n          onClick={props.onCloseCart}\n        >\n          Close\n        </Button>\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <CartCard>\n      {!submission.isHappening && !submission.isDone && !error && cartModalContent}\n      {!submission.isHappening && error && <p>{error}</p> }\n      {submission.isHappening && !error && isSubmittingModalContent}\n      {submission.isDone && submissionDoneContent}\n    </CartCard>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport Cart from \"./Cart\";\nimport styled from \"styled-components\";\n\nconst BackdropContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.75);\n`;\n\nconst Backdrop = (props) => {\n  //The backdrop adds a black overlay background behind the modal which restricts the interactivity with the rest of the page\n  //& with onClick in that background the modal also closes\n  return <BackdropContainer onClick={props.onCloseCart} />;\n};\n\nconst CartModal = (props) => {\n  return (\n    <React.Fragment>\n      {ReactDom.createPortal(\n        <Backdrop onCloseCart={props.onCloseCart} />,\n        document.getElementById(\"backdrop-root\")\n      )}\n      {ReactDom.createPortal(\n        <Cart onCloseCart={props.onCloseCart} />,\n        document.getElementById(\"modal-root\")\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default CartModal;\n","import React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\n//define initial state\nconst defaultCartState = {\n  items: [],\n  totalPrice: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalPrice =\n      state.totalPrice + action.item.price * action.item.amount;\n    //findIndex finds the index of an item in an array\n    //it takes a function that returns true if it's the item we're looking for\n    const existingCartItemsIndex = state.items.findIndex(\n      //is there an item in the existing array of items that matches the id of the item that we are about to add\n      //if true it returns the index of that item\n      (item) => item.id === action.item.id\n    );\n\n    const existingCartItem = state.items[existingCartItemsIndex];\n    let updatedItems;\n\n    //if there is an existingCartItem (which only is true if there is a matching index)\n    //then DON'T add the added item BUT just update the amount of existing item\n    if (existingCartItem) {\n      const updatedItem = {\n        //copy existing cart item\n        ...existingCartItem,\n        //update the amount with the amount of added item\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      //the updatedItems is a new array into which I copy the existing items\n      updatedItems = [...state.items];\n      //replace the existing item with the updated item\n      updatedItems[existingCartItemsIndex] = updatedItem;\n    } else {\n      //concat doesn't just push a new item into the array but creates a new array --> immutable way\n      //initial state is an empty array (cf. defaultCartState)\n      //add the entire item object to the items array\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalPrice: updatedTotalPrice,\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    const existingCartItemsIndex = state.items.findIndex(\n      // we are only dispatching an object that has the id so we only check that\n      (item) => item.id === action.id\n    );\n    const existingCartItem = state.items[existingCartItemsIndex];\n    //change the total price by subtracting the price of removing item\n    const updatedTotalPrice = state.totalPrice - existingCartItem.price;\n    let updatedItems;\n    //if the item only exists once (hence it's the last item) we want to remove the entire item from the array\n    if (existingCartItem.amount === 1) {\n      //return a new array that has that removed item with that specific id filtered out, hence removed\n      //the array contains all items that don't match with the removed item's id (action.id)\n      updatedItems = state.items.filter((item) => item.id !== action.id);\n    } else {\n      // if it's bigger than one, we want to keep the item in the array and just decrease the amount by 1\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount - 1,\n      };\n      //replace respective item with the item that has the updated amount\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemsIndex] = updatedItem;\n    }\n    //return new state object\n    return {\n      items: updatedItems,\n      totalPrice: updatedTotalPrice,\n    };\n  }\n  if (action.type === \"CLEAR\") {\n    return defaultCartState;\n  }\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  //dispatchCartAction calls the reducer function, cartState is the updated state\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const handleAddItem = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n\n  const handleRemoveItem = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const handleClearCart = () => {\n    dispatchCartAction({ type: \"CLEAR\" });\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        totalPrice: cartState.totalPrice,\n        items: cartState.items,\n        onAdd: handleAddItem,\n        onRemove: handleRemoveItem,\n        clearCart: handleClearCart,\n      }}\n    >\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport NavBar from \"./Components/NavBar/NavBar\";\nimport AvailableMeals from \"./Components/Meals/AvailableMeals\";\nimport MealsIntro from \"./Components/Meals/MealsIntro\";\nimport CartModal from \"./Components/Cart/CartModal\";\nimport CartProvider from \"./store/CartProvider\";\nimport { device } from \"./Components/UI/StyleVariables\";\n\nconst AppContainer = styled.div`\n  margin: auto;\n\n  @media ${device.laptop} {\n    max-width: 800px;\n  }\n\n  @media ${device.desktop} {\n    max-width: 1400px;\n  }\n`;\n\nfunction App() {\n  /**\n   * ? I could move the open and close handling state to context\n   */\n\n  const [openCart, setOpenCart] = useState(false);\n\n  const handleCloseCart = () => {\n    setOpenCart(false);\n  };\n\n  const handleOpenCart = () => {\n    setOpenCart(true);\n  };\n\n  return (\n    <CartProvider>\n      {openCart && <CartModal onCloseCart={handleCloseCart} />}\n      <NavBar onOpenCart={handleOpenCart} />\n      <MealsIntro />\n      <AppContainer>\n        <AvailableMeals />\n      </AppContainer>\n    </CartProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/UI/Button.js","Components/UI/StyleVariables.js","store/cart-context.js","Components/NavBar/NavBarCartButton.js","Components/NavBar/NavBar.js","Components/UI/Input.js","Components/Meals/MealItemForm.js","Components/UI/Card.js","Components/Meals/MealItem.js","Components/Meals/AvailableMeals.js","Components/Meals/MealsIntro.js","Components/Cart/CartItem.js","Components/Cart/Cart.js","Components/Cart/CartModal.js","store/CartProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","colors","CartContext","React","createContext","totalPrice","items","onAdd","item","onRemove","id","CartButtonContainer","Counter","span","NavBarCartButton","props","useState","btnIsHighlighted","setBtnIsHighlighted","cartCtx","useContext","numCartItems","reduce","curNumber","amount","btnClasses","useEffect","length","timer","setTimeout","clearTimeout","onClick","className","Nav","nav","NavBar","Fragment","onOpenCart","InputContainer","div","InputField","input","Input","forwardRef","ref","htmlFor","labelName","ItemFormContainer","form","AddButton","MealItemForm","amountIsValid","setAmountIsValid","amountInputRef","useRef","onSubmit","event","preventDefault","enteredAmount","current","value","enteredAmountNumber","trim","onAddToCart","type","min","max","step","defaultValue","Card","MealItemCard","MealItem","name","description","price","toFixed","DUMMY_MEALS","MainContainer","ul","AvailableMeals","map","IntroContainer","Background","MealsIntro","CartItemWrapper","li","CartSummary","AmountButtons","CartItem","CartCard","Cart","hasItems","handleCartItemRemove","hanldeCartItemAdd","bind","style","backgroundColor","color","border","borderColor","onCloseCart","onOrder","BackdropContainer","Backdrop","CartModal","ReactDom","createPortal","document","getElementById","defaultCartState","cartReducer","state","action","updatedItems","updatedTotalPrice","existingCartItemsIndex","findIndex","existingCartItem","updatedItem","concat","filter","CartProvider","useReducer","cartState","dispatchCartAction","Provider","children","App","openCart","setOpenCart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a39a3172.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  border: none;\n  padding: 0.5rem 3rem;\n  border-radius: 25px;\n  font-weight: bold;\n`;\n\nexport default Button;\n","export const colors = {\n  primary: \"rgba(\t244, 162, 97, 1)\",\n  primaryHover: \"rgba(246, 177, 120, 1)\",\n  secondary: \"rgba(79, 93, 117, 1)\",\n  secondaryHover: \"rgba(147, 160, 182, 1)\",\n  textOnColor: \"rgba(255, 255, 255, 1)\",\n};\n","import React from \"react\";\n\n//an object that also contains components\nconst CartContext = React.createContext({\n  totalPrice: 0,\n  items: [],\n  onAdd: (item) => {},\n  onRemove: (id) => {},\n});\n\n//To destructure and pull out more out of the App component --> Creae a separate Context Management Component\n\nexport default CartContext;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../UI/Button\";\nimport { colors } from \"../UI/StyleVariables\";\nimport CartContext from \"../../store/cart-context\";\n\nconst CartButtonContainer = styled(Button)`\n  display: flex;\n  flex-flow: row;\n  justify-content: space-around;\n  gap: 0.5rem;\n  align-items: center;\n  background-color: ${colors.primary};\n  color: ${colors.textOnColor};\n  margin-right: 2.5rem;\n  padding: 1.2rem 2rem;\n\n  &:hover,\n  &:active {\n    background-color: ${colors.primaryHover};\n  }\n\n  //bump animation when items are added\n  &.bump {\n    animation: bump 300ms ease-out;\n  }\n\n  @keyframes bump {\n    0% {\n      transform: scale(1);\n    }\n    10% {\n      transform: scale(0.9);\n    }\n    30% {\n      transform: scale(1.1);\n    }\n    50% {\n      transform: scale(1.15);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n`;\n\nconst Counter = styled.span`\n  display: block;\n  border-radius: 50%;\n  width: 1.1rem;\n  height: 1.1rem;\n  background: ${colors.secondary};\n  padding: 0.2rem;\n`;\n\nconst NavBarCartButton = (props) => {\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\n  const cartCtx = useContext(CartContext);\n\n  //to just count the meal items uniquely and not the total amount per item use reduce()\n  const numCartItems = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0);\n\n  //if the state is true insert the className \"bump\" to the button\n  const btnClasses = btnIsHighlighted ? \"bump\" : \"\";\n\n  useEffect(() => {\n    //if the cart is empty don't do anything\n    if (cartCtx.items.length === 0) {\n      return;\n    }\n    //otherwise change state to true and add \"bump\" as className to trigger animation\n    setBtnIsHighlighted(true);\n\n    //after 300ms stop animation\n    const timer = setTimeout(() => {\n      setBtnIsHighlighted(false);\n    }, 300);\n\n    return () => {\n      clearTimeout(timer);\n    };\n\n  }, [cartCtx.items]);\n\n  return (\n    <CartButtonContainer onClick={props.onClick} className={btnClasses}>\n      <span>\n        <i className=\"fa fa-shopping-cart\"></i>\n      </span>\n      <span>Your Cart</span>\n      <Counter>{numCartItems}</Counter>\n    </CartButtonContainer>\n  );\n};\n\nexport default NavBarCartButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport NavBarCartButton from \"./NavBarCartButton\";\nimport { colors } from \"../UI/StyleVariables\";\n\nconst Nav = styled.nav`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 4rem;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem;\n  background: ${colors.secondary};\n  color: white;\n  z-index: 10;\n`;\n\nconst NavBar = (props) => {\n\n  return (\n    <React.Fragment>\n      <Nav>\n        <h1>Sopo Meal</h1>\n        <NavBarCartButton onClick={props.onOpenCart} />\n      </Nav>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar;\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nconst InputContainer = styled.div`\n  font-size: 16px;\n`;\n\nconst InputField = styled.input`\n  border-radius: 5px;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n  border: none;\n  width: 3rem;\n  height: 1rem;\n  text-align: center;\n  margin-left: 1rem;\n`;\n\nconst Input = React.forwardRef((props, ref) => {\n  return (\n    <InputContainer>\n      <label htmlFor={props.input.id}>{props.labelName}</label>\n      <InputField ref={ref} {...props.input} />\n    </InputContainer>\n  );\n});\n\nexport default Input;\n","import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../UI/Button\";\nimport Input from \"../UI/Input\";\nimport { colors } from \"../UI/StyleVariables\";\n\nconst ItemFormContainer = styled.form`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: flex-end;\n`;\n\nconst AddButton = styled(Button)`\n  background-color: ${colors.secondary};\n  color: ${colors.textOnColor};\n  margin-top: 1rem;\n\n  &:hover {\n    background-color: ${colors.secondaryHover};\n  }\n`;\n\nconst MealItemForm = (props) => {\n  const [amountIsValid, setAmountIsValid] = useState(true);\n\n  //since it's a simple input number change and only read (not write), it's recommended to use ref\n  const amountInputRef = useRef();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    //get currently entered value from input, add a + in front of it so it's a number and not a string\n    const enteredAmount = amountInputRef.current.value;\n    const enteredAmountNumber = +enteredAmount;\n\n    if (\n      enteredAmount.trim().length === 0 ||\n      enteredAmountNumber < 1 ||\n      enteredAmountNumber > 5\n    ) {\n      setAmountIsValid(false);\n      return;\n    }\n\n    //the cart item that is gonna be added needs more data than just the amount, but in this form we only have the amount\n    //so we need to handle the actual adding of the entire meal item within MealItem\n    props.onAddToCart(enteredAmountNumber);\n  };\n\n  /**\n   * TODO: Figure out why the input field per item doesn't update with the current amount of each item!!\n   */\n  return (\n    /* We are handling the entire submission via the form so it applies to changes of both the add btn and input */\n    <ItemFormContainer onSubmit={handleSubmit}>\n      <Input\n        ref={amountInputRef}\n        labelName={\"Amount: \"}\n        input={{\n          id: \"amount_\" + props.id,\n          type: \"number\",\n          min: \"1\",\n          max: \"5\",\n          step: \"1\",\n          defaultValue: \"1\",\n        }}\n      ></Input>\n      <AddButton>+ Add</AddButton>\n      {!amountIsValid && <p>Please enter a valid amount (1-5).</p>}\n    </ItemFormContainer>\n  );\n};\n\nexport default MealItemForm;\n","import styled from 'styled-components';\n\nconst Card = styled.div`\n  border-radius: 12px;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n`;\n\n\nexport default Card;","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport MealItemForm from \"./MealItemForm\";\nimport Card from \"../UI/Card\";\nimport { colors } from \"../UI/StyleVariables\";\nimport CartContext from \"../../store/cart-context\";\n\nconst MealItemCard = styled(Card)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: ${colors.primary};\n  padding: 1rem 2rem 1rem 2rem;\n  margin: 1rem;\n`;\n\nconst MealItem = (props) => {\n  const cartCtx = useContext(CartContext);\n\n  //update the array of items within context with the added item\n  //the updated amount we get by passing this handler to the MealItemForm\n  const handleAddToCart = (amount) => {\n    cartCtx.onAdd({\n      id: props.id,\n      name: props.name,\n      amount: amount,\n      price: props.price\n    });\n  };\n\n  return (\n    <MealItemCard>\n      <li>\n        <h2>{props.name}</h2>\n        <p>{props.description}</p>\n        <p>${props.price.toFixed(2)}</p>\n      </li>\n      <MealItemForm onAddToCart={handleAddToCart} id={props.id} />\n    </MealItemCard>\n  );\n};\n\nexport default MealItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MealItem from \"./MealItem\";\n\nconst DUMMY_MEALS = [\n  {\n    id: \"m1\",\n    name: \"Sushi\",\n    description: \"Finest fish and veggies\",\n    price: 22.99,\n  },\n  {\n    id: \"m2\",\n    name: \"Schnitzel\",\n    description: \"A german specialty!\",\n    price: 16.5,\n  },\n  {\n    id: \"m3\",\n    name: \"Barbecue Burger\",\n    description: \"American, raw, meaty\",\n    price: 12.99,\n  },\n  {\n    id: \"m4\",\n    name: \"Green Bowl\",\n    description: \"Healthy...and green...\",\n    price: 18.99,\n  },\n];\n\nconst MainContainer = styled.ul`\n  margin: 2rem;\n  padding: 0.5rem;\n  list-style-type: none;\n`;\n\nconst AvailableMeals = () => {\n  return (\n    <MainContainer>\n      {DUMMY_MEALS.map((item) => (\n        <MealItem\n          id={item.id}\n          key={item.id}\n          name={item.name}\n          description={item.description}\n          price={item.price}\n        />\n      ))}\n    </MainContainer>\n  );\n};\n\nexport default AvailableMeals;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../UI/Card\";\n\nconst IntroContainer = styled(Card)`\n  margin: 5rem 15rem 5rem 15rem;\n  padding: 2rem;\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n`;\n\nconst Background = styled.div`\n  margin-top: 5rem;\n  padding: 1rem;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"./restaurant_image.jpg\");\n`;\n\nconst MealsIntro = () => {\n  return (\n    <Background>\n      <IntroContainer>\n        <h2>Delicious Food, Delivered To You</h2>\n        <p>\n          Choose your favorite meal from our broad selection of available meals\n          and enjoy a delicious lunch or dinner at home.\n        </p>\n        <p>\n          All our meals are cooked with high-quality ingredients, just-in-time\n          and of course by experienced chefs!\n        </p>\n      </IntroContainer>\n    </Background>\n  );\n};\n\nexport default MealsIntro;\n","import React from \"react\";\nimport Button from \"../UI/Button\";\nimport styled from \"styled-components\";\nimport { colors } from \"../UI/StyleVariables\";\n\nconst CartItemWrapper = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 3px solid ${colors.primary};\n  padding: 1rem 0;\n  margin: 1rem 0;\n\n  & div.actions {\n    display: flex;\n    flex-direction: row;\n  }\n`;\n\nconst CartSummary = styled.div`\n  width: 10rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  & span.price {\n    font-weight: bold;\n    color: ${colors.secondary};\n  }\n\n  & span.amount {\n    font-weight: bold;\n    border: 1px solid ${colors.secondaryHover};\n    padding: 0.25rem 0.75rem;\n    border-radius: 6px;\n    color: ${colors.secondary};\n  }\n`;\n\nconst AmountButtons = styled(Button)`\n  border: 1px solid ${colors.secondary};\n  font: inherit;\n  font-weight: bold;\n  font-size: 1.25rem;\n  color: ${colors.secondary};\n  width: 3rem;\n  text-align: center;\n  border-radius: 6px;\n  background-color: transparent;\n  cursor: pointer;\n  margin-left: 1rem;\n  margin: 0.25rem;\n  padding: 0.7rem;\n\n  &:hover,\n  &:active {\n      background-color: ${colors.secondaryHover};\n      color: white;\n  }\n`;\n\nconst CartItem = (props) => {\n  return (\n    <CartItemWrapper>\n      <div>\n        <h2>{props.name}</h2>\n        <CartSummary>\n          <span className={\"price\"}>${props.price.toFixed(2)}</span>\n          <span className={\"amount\"}>x {props.amount}</span>\n        </CartSummary>\n      </div>\n      <div className={\"actions\"}>\n        <AmountButtons onClick={props.onRemove}>-</AmountButtons>\n        <AmountButtons onClick={props.onAdd}>+</AmountButtons>\n      </div>\n    </CartItemWrapper>\n  );\n};\n\nexport default CartItem;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../UI/Card\";\nimport Button from \"../UI/Button\";\n\nimport { colors } from \"../UI/StyleVariables\";\nimport CartItem from \"./CartItem\";\nimport CartContext from \"../../store/cart-context\";\n\nconst CartCard = styled(Card)`\n  position: fixed;\n  top: 30vh;\n  left: 10%;\n  width: 80%;\n  z-index: 100;\n  overflow: hidden;\n  background: white;\n  max-height: 30rem;\n\n  & div {\n    padding: 1rem;\n  }\n\n  & ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    max-height: 20rem;\n    overflow: auto;\n  }\n\n  & div.total {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-weight: bold;\n    font-size: 1.5rem;\n    margin: 1rem 0;\n  }\n\n  & div.actions {\n    padding: 1rem;\n    display: flex;\n    justify-content: flex-end;\n    gap: 1rem;\n  }\n`;\n\nconst Cart = (props) => {\n  const cartCtx = useContext(CartContext);\n\n  const totalPrice = `$${cartCtx.totalPrice.toFixed(2)}`;\n\n  const hasItems = cartCtx.items.length > 0;\n\n  const handleCartItemRemove = (id) => {\n    cartCtx.onRemove(id)\n    \n  };\n\n  const hanldeCartItemAdd = (item) => {\n    //add item where I set the amount to 1\n    cartCtx.onAdd({ ...item, amount: 1 });\n  };\n\n  return (\n    <CartCard>\n      <ul>\n        {cartCtx.items.map((item) => (\n          <CartItem\n            key={item.id}\n            amount={item.amount}\n            name={item.name}\n            price={item.price}\n            /*\n             * Use bind to pre-configure the function for future execution\n             * pre-configure the argument that function will receieve when it executes\n             *\n             * */\n            onRemove={handleCartItemRemove.bind(null, item.id)}\n            onAdd={hanldeCartItemAdd.bind(null, item)}\n          />\n        ))}\n      </ul>\n      <div className=\"total\">\n        <span>Total Price</span>\n        <span>{totalPrice}</span>\n      </div>\n      <div className=\"actions\">\n        <Button\n          style={{\n            backgroundColor: \"white\",\n            color: `${colors.secondary}`,\n            border: \"solid\",\n            borderColor: `${colors.secondary}`,\n          }}\n          onClick={props.onCloseCart}\n        >\n          Close\n        </Button>\n        {hasItems && (\n          <Button\n            style={{ backgroundColor: `${colors.secondary}`, color: \"white\" }}\n            onClick={props.onOrder}\n          >\n            Order\n          </Button>\n        )}\n      </div>\n    </CartCard>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport Cart from \"./Cart\";\nimport styled from \"styled-components\";\n\nconst BackdropContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.75);\n`;\n\nconst Backdrop = (props) => {\n  //The backdrop adds a black overlay background behind the modal which restricts the interactivity with the rest of the page\n  //& with onClick in that background the modal also closes\n  return <BackdropContainer onClick={props.onCloseCart} />;\n};\n\nconst CartModal = (props) => {\n  return (\n    <React.Fragment>\n      {ReactDom.createPortal(\n        <Backdrop onCloseCart={props.onCloseCart} />,\n        document.getElementById(\"backdrop-root\")\n      )}\n      {ReactDom.createPortal(\n        <Cart onCloseCart={props.onCloseCart} />,\n        document.getElementById(\"modal-root\")\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default CartModal;\n","import React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\n//define initial state\nconst defaultCartState = {\n  items: [],\n  totalPrice: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalPrice =\n      state.totalPrice + action.item.price * action.item.amount;\n    //findIndex finds the index of an item in an array\n    //it takes a function that returns true if it's the item we're looking for\n    const existingCartItemsIndex = state.items.findIndex(\n      //is there an item in the existing array of items that matches the id of the item that we are about to add\n      //if true it returns the index of that item\n      (item) => item.id === action.item.id\n    );\n\n    const existingCartItem = state.items[existingCartItemsIndex];\n    let updatedItems;\n\n    //if there is an existingCartItem (which only is true if there is a matching index)\n    //then DON'T add the added item BUT just update the amount of existing item\n    if (existingCartItem) {\n      const updatedItem = {\n        //copy existing cart item\n        ...existingCartItem,\n        //update the amount with the amount of added item\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      //the updatedItems is a new array into which I copy the existing items\n      updatedItems = [...state.items];\n      //replace the existing item with the updated item\n      updatedItems[existingCartItemsIndex] = updatedItem;\n    } else {\n      //concat doesn't just push a new item into the array but creates a new array --> immutable way\n      //initial state is an empty array (cf. defaultCartState)\n      //add the entire item object to the items array\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalPrice: updatedTotalPrice,\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    const existingCartItemsIndex = state.items.findIndex(\n      // we are only dispatching an object that has the id so we only check that\n      (item) => item.id === action.id\n    );\n    const existingCartItem = state.items[existingCartItemsIndex];\n    //change the total price by subtracting the price of removing item\n    const updatedTotalPrice = state.totalPrice - existingCartItem.price;\n    let updatedItems;\n    //if the item only exists once (hence it's the last item) we want to remove the entire item from the array\n    if (existingCartItem.amount === 1) {\n      //return a new array that has that removed item with that specific id filtered out, hence removed\n      //the array contains all items that don't match with the removed item's id (action.id)\n      updatedItems = state.items.filter((item) => item.id !== action.id);\n    } else {\n      // if it's bigger than one, we want to keep the item in the array and just decrease the amount by 1\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount - 1,\n      };\n      //replace respective item with the item that has the updated amount\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemsIndex] = updatedItem;\n    }\n    //return new state object\n    return {\n      items: updatedItems,\n      totalPrice: updatedTotalPrice,\n    };\n  }\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  //dispatchCartAction calls the reducer function, cartState is the updated state\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const handleAddItem = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n\n  const handleRemoveItem = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        totalPrice: cartState.totalPrice,\n        items: cartState.items,\n        onAdd: handleAddItem,\n        onRemove: handleRemoveItem,\n      }}\n    >\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n","import React, {useState} from \"react\";\nimport NavBar from \"./Components/NavBar/NavBar\";\nimport AvailableMeals from \"./Components/Meals/AvailableMeals\";\nimport MealsIntro from \"./Components/Meals/MealsIntro\";\nimport CartModal from \"./Components/Cart/CartModal\";\nimport CartProvider from \"./store/CartProvider\";\n\nfunction App() {\n\n  /**\n   * ? I could move the open and close handling state to context\n   */\n\n  const [openCart, setOpenCart] = useState(false);\n\n  const handleCloseCart = () => {\n    setOpenCart(false);\n  };\n\n  const handleOpenCart = () => {\n    setOpenCart(true);\n  };\n\n  return (\n    <CartProvider>\n      {openCart && <CartModal onCloseCart={handleCloseCart} />}\n      <NavBar onOpenCart={handleOpenCart}/>\n      <MealsIntro />\n      <AvailableMeals />\n    </CartProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}